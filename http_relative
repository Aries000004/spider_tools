二、POST方法

通常HTTP协议是以ASCII编码进行传输，建立在TCP/IP协议之上的应用层协议。HTTP协议报文将请求分为三个部分：状态行、请求头、消息主体。
协议格式如下：

<method> <request-url> <version>
<headers>

<entity-body>
HTTP协议规定POST提交的数据必须放在消息主体（entity-body）中，但协议并没有规定数据必须使用什么编码方式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的HTTP请求满足上面的格式就可以。

当客户端数据发送出去，解析由服务端来完成。一般服务端语言如：php、python等，以及它们的framework、WSGI等，都内置了自动解析常见数据格式的功能。服务端通常是根据请求头（headers）中的Content-Type字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。

1. application/x-www-form-urlencoded编码方式

这是最常见的POST提交数据的方式了。浏览器的原生form表单，如果不设置enctype的属性，那么最终就会以此方式提交数据。请求类似于下面这样：


POST http://www.qmailer.net HTTP/1.1
Content-Type: application/x-www-form-urlencoded; charset=utf-8

name=qmailer&domain=net
首先，Content-Type被指定为application/x-www-form-urlencoded；
其次，提交的数据按照 key1=val1&key2=val2的方式进行编码，key和val都进行了URL转码。
大部分服务端语言都对这种方式有很好的支持。例如PHP中，$_POST[‘name]可以获取到name的值，$_POST[‘domain’] 可以得到domain的值。
很多时候，我们用Ajax提交数据时，也是使用这种方式。例如JQuery，Content-Type默认值都是application/x-www-form-urlencoded;charset=utf-8。

2. multipart/form-data编码方式

这也是很常见的POST数据提交的方式。我们使用表单上传文件时，必须让form的enctyped等于这个值。例如：

POST http://www.example.com HTTP/1.1
Content-Type:multipart/form-data; boundary=${bound}

--${bound}
Content-Disposition: form-data; name="text"

title

--${bound}
Content-Disposition: form-data; name="file"; filename="chrome.png"
Content-Type: image/png

PNG ... content of chrome.png ...
--${bound}--
首先，${bound} 是一个占位符，代表我们规定的分割符，可以自己任意规定，但为了避免和正常文本重复了，尽量要使用复杂一点的内容。
然后，Content-Type里指明了数据是以mutipart/form-data来编码，本次请求的boundary是什么内容。消息主体里按照字段个数又分为多个结构类似的部分，每部分都是以–boundary开始，紧接着内容描述信息，然后是回车，最后是字段具体内容（文本或二进制）。如果传输的是文件，还要包含文件名和文件类型信息。消息主体最后以–boundary–标示结束。
关于mutipart/form-data的详细定义，请前往rfc1867查看。

3. application/json编码方式

上面提到的这两种POST数据的方式，都是浏览器原生支持的，而且现阶段原生form表单也只支持这两种方式。但是随着越来越多的Web站点，尤其是WebApp，全部使用Ajax进行数据交互之后，我们完全可以定义新的数据提交方式，给开发带来更多便利。

application/json 这个Content-Type作为响应头大家肯定不陌生。实际上，现在越来越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的JSON字符串。由于JSON规范的流行，除了低版本IE之外的各大浏览器都原生支持JSON.stringify，服务端语言也都有处理JSON的函数，使用JSON不会遇上什么麻烦。

Google的AngularJS中的Ajax功能，默认就是提交JSON字符串。例如下面这段代码：

1
2
3
4
var data = {'title':'test', 'sub' : [1,2,3]};
  $http.post(url, data).success(function(result) {
  ...
});
最终发送的请求是：

1
2
3
4
POST http://www.example.com HTTP/1.1
Content-Type: application/json; charset=utf-8

{"title":"test","sub":[1,2,3]}
这种方案，可以方便的提交复杂的结构化数据，特别适合RESTful的接口。各大抓包工具如Chrome自带的开发者工具、Firebug、Fiddler，都会以树形结构展示JSON数据，非常友好。但也有些服务端语言还没有支持这种方式。

4. text/xml编码方式

XML-RPC（XML Remote Procedure Call）是一种使用HTTP作为传输协议，以XML作为编码方式的远程调用规范。
典型的 XML-RPC 请求是这样的：

POST http://www.example.com HTTP/1.1
Content-Type: text/xml

<!--?xml version="1.0"?-->
<methodcall>
  <methodname>examples.getStateName</methodname>
  <params>
      <param>
          <value><i4>41</i4>
          </value>
      </param>
  </params>
</methodcall>
XML-RPC协议简单、功能够用，各种语言的实现都有。